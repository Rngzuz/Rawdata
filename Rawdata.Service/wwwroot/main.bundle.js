!function(t){function e(e){for(var s,i,o=e[0],l=e[1],c=e[2],p=0,h=[];p<o.length;p++)i=o[p],n[i]&&h.push(n[i][0]),n[i]=0;for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&(t[s]=l[s]);for(d&&d(e);h.length;)h.shift()();return r.push.apply(r,c||[]),a()}function a(){for(var t,e=0;e<r.length;e++){for(var a=r[e],s=!0,o=1;o<a.length;o++){var l=a[o];0!==n[l]&&(s=!1)}s&&(r.splice(e--,1),t=i(i.s=a[0]))}return t}var s={},n={0:0},r=[];function i(e){if(s[e])return s[e].exports;var a=s[e]={i:e,l:!1,exports:{}};return t[e].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=s,i.d=function(t,e,a){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(a,s,function(e){return t[e]}.bind(null,s));return a},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="";var o=window.webpackJsonp=window.webpackJsonp||[],l=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var d=l;r.push([511,1]),a()}({207:function(t,e,a){var s=a(208);"string"==typeof s&&(s=[[t.i,s,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};a(121)(s,n);s.locals&&(t.exports=s.locals)},208:function(t,e,a){(t.exports=a(120)(!1)).push([t.i,"so-app {\r\n    padding-top: 56px;\r\n    min-height: 100vh;\r\n}\r\n\r\nso-app,\r\nso-home,\r\nso-loader,\r\nso-navbar,\r\nso-forcegraph,\r\nso-search,\r\nso-user-profile,\r\nso-word-cloud {\r\n    display: block;\r\n}\r\n\r\n.card-list-note {\r\n    z-index: 2;\r\n    position: absolute;\r\n    height: 143px;\r\n    width: 250px;\r\n}\r\n\r\nmark {\r\n    padding: .02rem .4rem .1rem .4rem;\r\n    font-size: 87.5%;\r\n    background-color: #fff2b3;\r\n    border-radius: .2rem;\r\n}\r\n\r\n#content {\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n}\r\n\r\n#loader {\r\n    z-index: 1;\r\n    position: absolute;\r\n    top: calc(50% + 56px);\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.navbar {\r\n    box-shadow: 0 0 4px rgba(0, 0, 0, .35);\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n}\r\n\r\n.navbar > .container {\r\n    position: relative;\r\n    padding-right: 1rem !important;\r\n    padding-left: 1rem !important;\r\n}\r\n\r\n.btn-sign-in {\r\n    padding-right: 5rem;\r\n}\r\n\r\nso-search {\r\n    padding-top: 56px;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: rgba(0, 0, 0, .5)\r\n}\r\n\r\n.card-rounded-bottom {\r\n    border-radius: 0 0 .25rem .25rem;\r\n}\r\n\r\n.card-body-list {\r\n    padding: .75rem 1.25rem;\r\n}\r\n\r\n.card-body h1 {\r\n    font-size: 1.5rem;\r\n}\r\n\r\n.card-body h2 {\r\n    font-size: 1.3rem;\r\n}\r\n\r\n.card-body h3 {\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.score {\r\n    margin-top: .3rem;\r\n    font-size: 1.1rem;\r\n}\r\n\r\n/* force graph stuff */\r\n.links line {\r\n    stroke: #999;\r\n    stroke-opacity: 0.6;\r\n}\r\n\r\n.nodes circle {\r\n    stroke: rgb(2, 142, 235);\r\n    stroke-width: 1.5px;\r\n}\r\n\r\ntext {\r\n    font-family: sans-serif;\r\n    font-size: 10px;\r\n}\r\n\r\npre:last-child, p:last-child {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.card-user-profile {\r\n    padding-top: 1.25rem;\r\n    padding-bottom: 1.75rem;\r\n\r\n    font-size: 25px;\r\n}\r\n\r\n.profile-title {\r\n    padding-top: 1.25rem;\r\n}\r\n\r\n.profile-note {\r\n    font-size: 25px;\r\n    font-style: italic;\r\n    padding-bottom: 1.5rem;\r\n    color: #007bff;\r\n}\r\n\r\n.marked-star {\r\n     padding-right: 1.25rem;\r\n     padding-left: 1.25rem;\r\n     color: #007bff;\r\n }\r\n\r\n.marked-edit {\r\n    padding-right: 1.0rem;\r\n    padding-left: 1.25rem;\r\n    color: #007bff;\r\n}\r\n",""])},511:function(t,e,a){"use strict";a.r(e);var s=a(4),n=a.n(s);a(204),a(207);class r{constructor(t){this.baseUrl=t}get requestOptions(){const t=localStorage.getItem("token");return t?{credentials:"include",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"}}:{}}objectToSearchParams(t){const e=Object.entries(t);return this.arrayToSearchParams(e)}arrayToSearchParams(t,e=""){if(t.length<1)return e?"?"+e.substring(1):"";const[a,s]=t.shift();return s&&(Array.isArray(s)?e+="&"+s.map(t=>`${a}=${encodeURIComponent(t)}`).join("&"):e+=`&${a}=${encodeURIComponent(s)}`),this.arrayToSearchParams(t,e)}buildUrl({path:t="",searchParams:e={},fragment:a=""}){return this.baseUrl+t+this.objectToSearchParams(e)+a}}var i=new class extends r{constructor(){super("/api")}async getNewest(){const t=this.buildUrl({path:"/questions"}),e=await fetch(t);return await e.json()}async getBestMatch(t,e=1,a=50){const s=this.buildUrl({path:"/search/best",searchParams:{words:t,page:e,size:a}}),n=await fetch(s,this.requestOptions);return await n.json()}async getExactMatch(t,e=1,a=50){const s=this.buildUrl({path:"/search/exact",searchParams:{words:t,page:e,size:a}}),n=await fetch(s,this.requestOptions);return await n.json()}async getRankedWeightedMatch(t,e=1,a=50){const s=this.buildUrl({path:"/search/ranked",searchParams:{words:t,page:e,size:a}}),n=await fetch(s,this.requestOptions);return await n.json()}async getWords(t,e=100){const a=this.buildUrl({path:"/search/words",searchParams:{word:t,size:e}}),s=await fetch(a,this.requestOptions);return await s.json()}async getWordAssociation(t,e=100){const a=this.buildUrl({path:"/search/words",searchParams:{word:t,size:e}}),s=await fetch(a,this.requestOptions);return await s.json()}async getForceGraphInput(t,e=8){const a=this.buildUrl({path:"/search/forcegraph",searchParams:{word:t,grade:e}}),s=await fetch(a);return await s.json()}};var o=new class extends r{constructor(){super("/api/users")}async getUserProfile(){const t=this.buildUrl({path:"/profile"}),e=await fetch(t,this.requestOptions),a=await e.json();return console.log(a),a}async toggleMarkedPost(t,e){const a=this.buildUrl({path:"/posts"}),s=await fetch(a,{...this.requestOptions,method:"POST",body:JSON.stringify({postId:t,note:e})});return 204===s.status?s:await s.json()}async updateMarkedPostNote(t,e){const a=this.buildUrl({path:"/posts/"+t}),s=await fetch(a,{method:"POST",body:{postId:t,note:e},headers:{"Content-Type":"application/json"}});return await s.json()}async toggleMarkedComment(t,e){const a=this.buildUrl({path:"/comments"}),s=await fetch(a,{...this.requestOptions,method:"POST",body:JSON.stringify({commentId:t,note:e})});return 204===s.status?s:await s.json()}},l=a(513);var c=new class{constructor({state:t,getters:e,mutations:a,actions:s}){Object.defineProperties(this,{state:{value:t},getters:{value:Object(l.a)(e,(e,a,s)=>(e[s]=a(t),e),{})},mutations:{value:a},actions:{value:s}}),this.subscribe=this.subscribe.bind(this),this.commit=this.commit.bind(this),this.dispatch=this.dispatch.bind(this)}subscribe(t,e){return this.state[t].subscribe(e)}commit(t,e){return this.mutations[t].call(this,this.state,e)}dispatch(t,e){return this.actions[t].call(this,{state:this.state,getters:this.getters,commit:this.commit,payload:e})}}({state:{isAuthenticated:Object(s.observable)(!1),isLoading:Object(s.observable)(!1),searchParams:Object(s.observableArray)([])},getters:{isAuthenticated:t=>t.isAuthenticated,isLoading:t=>t.isLoading,searchParams:t=>t.searchParams},mutations:{SET_IS_AUTHENTICATED(t,e){t.isAuthenticated(e)},SET_IS_LOADING(t,e){t.isLoading(e)},SET_SEARCH_PARAMS(t,e){t.searchParams(e)}},actions:{async toggleMarkPost({payload:t}){await o.toggleMarkedPost(t.id,t.note)},async toggleMarkComment({payload:t}){await o.toggleMarkedComment(t)},updateIsAuthenticated({commit:t,payload:e}){t("SET_IS_AUTHENTICATED",e)},updateIsLoading({commit:t,payload:e}){t("SET_IS_LOADING",e)},updateSearchParams({commit:t,payload:e}){t("SET_SEARCH_PARAMS",/\w/.test(e)?e.split(/\s/):[])}}});var d=new class{constructor(t){this.routes=t,this.currentRoute=Object(s.observable)({...t[0],params:{}})}setRoute(t,e={}){const a=this.routes.find(e=>e.name===t);t!==this.currentRoute().name&&this.currentRoute({...a,params:e})}getRoute(){return this.currentRoute()}}([{name:"home",component:"so-home",title:"Home"},{name:"sign-in",component:"so-sign-in",title:"Sign in"},{name:"user-profile",component:"so-user-profile",title:"User profile"},{name:"question",component:"so-question",title:"Question"},{name:"failure",component:"so-failure",title:"Failure"},{name:"force-graph",component:"so-force-graph",title:"Force Graph"},{name:"word-cloud",component:"so-word-cloud",title:"Word Cloud"},{name:"register",component:"so-register",title:"Register"}]);class p{constructor(t){if(void 0!==t[0]){const{$raw:e={},...a}=t[0];this.$raw=e,this.$params=a}else this.$raw={},this.$params={};if(void 0!==t[1]){const{element:e,templateNodes:a=[]}=t[1];this.$el=e,this.$tNodes=a}else this.$el=void 0,this.$tNodes=[];this.$store=c,this.$router=d,this.isLoading=Object(s.computed)({read:this.$store.getters.isLoading,write:t=>this.$store.dispatch("updateIsLoading",t)})}}function h(t,e){return{viewModel:{createViewModel:(...e)=>new t(e)},template:e}}const u=new DOMParser,m=t=>t.replace(/[<>]/g,t=>"&#"+t.charCodeAt(0)+";"),b=(t,e)=>{const a=new RegExp(`\\b(${e.join("|")})\\b`,"gi");return m(t).replace(a,"<mark>$&</mark>")},g=(t,e=400)=>{const a=u.parseFromString(t,"text/html");return Array.from(a.body.children).filter(t=>/(p|code)/i.test(t.tagName)).map(t=>t.textContent).join(" ").replace(/[<>]/g,t=>"&#"+t.charCodeAt(0)+";").substring(0,e)},f=(t,e,a=" ... ")=>((t,e,a,s=400)=>{const n=new RegExp(`\\b(${e.join("|")})\\b`,"gi");return t.filter(t=>n.test(t)).join(a).replace(/[<>]/g,t=>"&#"+t.charCodeAt(0)+";").substring(0,s).replace(n,"<mark>$&</mark>")})((t=>{const e=u.parseFromString(t,"text/html");return Array.from(e.body.children).filter(t=>!/(hr|br|img)/i.test(t.tagName)).map(t=>t.innerHTML.replace(/<(\/|).+?>/g,"").replace(/(^[\s\:\;]+|[\s\:\;]+$)/g,"").split(/[\.\?\:!]\s+?/g)).flatMap(t=>[...t])})(t),e,a);var v=h(class extends p{constructor(t){super(t),this.words=this.$store.getters.searchParams,this.items=Object(s.observableArray)([]),this.currentPage=Object(s.observable)(1),this.pageCount=Object(s.observable)(1),this.searchAlgo=Object(s.observable)("best"),this.fetchPosts(this.$store.getters.searchParams());const e=this.$store.subscribe("searchParams",t=>{this.fetchPosts(t,this.currentPage.peek())}),a=this.currentPage.subscribe(t=>{this.fetchPosts(this.words.peek(),t)});this.dispose=function(){e.dispose(),a.dispose()}}previousPage(){const t=this.currentPage.peek();t>1&&this.currentPage(t-1)}nextPage(){const t=this.currentPage.peek();t+1!==this.currentPage.peek()&&this.currentPage(t+1)}async fetchPosts(t,e=1,a=50){let s;if(this.isLoading(!0),t.length>0){let n;switch(this.searchAlgo()){case"best":n=await i.getBestMatch(t,e,a);break;case"exact":n=await i.getExactMatch(t,e,a);break;case"ranked":n=await i.getRankedWeightedMatch(t,e,a)}this.currentPage(n.currentPage),this.pageCount(n.pageCount),s=n.items.map(e=>{const a={...e,body:f(e.body,t)};return e.title&&(a.title=b(e.title,t)),a})}else{const e=await i.getNewest();this.pageCount(0),s=e.map(e=>{const a={...e,body:g(e.body)};return e.title&&(a.title=m(e.title,t)),a})}this.items(s),this.isLoading(!1)}},'\n\x3c!-- ko if: !isLoading() --\x3e\n    <div class="form-inline mb-3">\n        <div class="form-check">\n            <label class="form-check-label">\n                <input class="form-check-input" type="radio" value="best" data-bind="checked: searchAlgo" checked>\n                <span>Best match</span>\n            </label>\n        </div>\n        <div class="form-check mx-4">\n            <label class="form-check-label">\n                <input class="form-check-input" type="radio" value="exact" data-bind="checked: searchAlgo">\n                <span>Exact match</span>\n            </label>\n        </div>\n        <div class="form-check">\n            <label class="form-check-label">\n                <input class="form-check-input" type="radio" value="ranked" data-bind="checked: searchAlgo">\n                <span>Ranked weighted match</span>\n            </label>\n        </div>\n    </div>\n\n    <section data-bind="component: { name: \'so-list\', params: { items } } "></section>\n\n    \x3c!-- ko if: (pageCount() > 1) --\x3e\n        <div class="text-center">\n            <b data-bind="text: \'page \' + currentPage()"></b>\n        </div>\n        <nav class="d-flex justify-content-center mt-3">\n            <ul class="pagination">\n                <li class="page-item" data-bind="css: { disabled: (currentPage() === 1) }">\n                    <a class="page-link" data-bind="click: previousPage">Previous</a>\n                </li>\n                <li class="page-item" data-bind="css: { disabled: (currentPage() === pageCount()) }">\n                    <a class="page-link" data-bind="click: nextPage">Next</a>\n                </li>\n            </ul>\n        </nav>\n    \x3c!-- /ko --\x3e\n\x3c!-- /ko --\x3e\n');var y=new class extends r{constructor(){super("/api")}async register(t){const e=this.buildUrl({path:"/register"}),a=await fetch(e,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});return await a.json()}async signIn(t){const e=this.buildUrl({path:"/oauth"}),a=await fetch(e,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});if(200===a.status){const t=await a.text();return localStorage.setItem("token",t),t}}hasToken(){return null!==localStorage.getItem("token")}signOut(){localStorage.removeItem("token")}};var w=h(class extends p{constructor(t){super(t),this.email=Object(s.observable)(""),this.password=Object(s.observable)("")}async signIn(){if(!this.inputFilledOut())return void alert("Please fill out all sign in data");const t={email:this.email(),password:this.password()};void 0!==await y.signIn(t)?(this.$store.dispatch("updateIsAuthenticated",!0),this.$router.setRoute("home")):alert("Sign in failed")}inputFilledOut(){return this.email().length>0&&this.password().length>0}},'\n<div class="card">\n    <div class="card-body">\n        <form data-bind="submit: signIn">\n            <div class="form-group">\n                <label for="email">Email address</label>\n                <input type="email" class="form-control" id="email" data-bind="value: email">\n                <small class="form-text text-muted">We\'ll never share your email with anyone else.</small>\n            </div>\n            <div class="form-group">\n                <label for="password">Password</label>\n                <input type="password" class="form-control" id="password" data-bind="value: password">\n            </div>\n            <button type="submit" class="btn btn-primary">Sign in</button>\n        </form>\n    </div>\n</div>\n');var x=h(class extends p{constructor(t){super(t),this.isLoading(!0),this.profile=Object(s.observable)({}),this.markedPosts=Object(s.observableArray)(),this.markedComments=Object(s.observableArray)(),this.fetchUserProfile()}async fetchUserProfile(){let t=await o.getUserProfile();this.profile(t),this.markedPosts(t.markedPosts),this.markedComments(t.markedComments),this.isLoading(!1)}async unmarkPost(t,e){e.preventDefault(),this.markedPosts.destroy(t),await c.dispatch("toggleMarkPost",t.id)}async unmarkComment(t,e){e.preventDefault(),this.markedComments.destroy(t),await c.dispatch("toggleMarkComment",t.id)}},'\n<div data-bind="visible: !isLoading()">\n    <so-loader id="loader" data-bind="visible: isLoading()" params="size: 200"></so-loader>\n    <div class="card-user-profile">\n        <div>\n            <h2 class="display-4" data-bind="text: profile().displayName">User Name here</h2>\n            <p><strong>Email: </strong><span data-bind="text: profile().email"></span> </p>\n            <p><strong>Profile created: </strong><span data-bind="text: profile().creationDate"></span> </p>\n        </div>\n    </div>\n\n    <h2 class="display-4">Marked Posts</h2>\n    <div class="card">\n        <ul class="list-group list-group-flush" data-bind="foreach: markedPosts">\n            <li class="list-group-item d-flex justify-content-between align-items-center py-4">\n                <div class="mr-3 text-center flex-shrink-1">\n                    <span class="d-block badge badge-primary badge-pill" data-bind="text: $data.score"></span>\n                    <small class="d-block text-muted">score</small>\n                </div>\n                <article class="flex-grow-1">\n                    <span class="profile-note" data-bind="visible: $data.note, text: \'Note: \' + $data.note"></span>\n\n                    <h5 class="card-title" data-bind="visible: $data.title, text: $data.title"></h5>\n\n                    <div data-bind="text: $data.body"></div>\n\n                    <cite class="d-block mt-3" data-bind="attr: { title: $data.authorDisplayName }">\n                        <span class="text-muted" data-bind="text: \' - \' + $data.authorDisplayName"></span>\n                    </cite>\n                </article>\n                <div>\n                <i class="fas fa-star fa-2x marked-star" data-bind="click: (post, event) => $component.unmarkPost(post, event)"></i>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n    <h2 class="display-4 profile-title">Marked Comments</h2>\n    <div class="card">\n        <ul class="list-group list-group-flush" data-bind="foreach: markedComments">\n            <li class="list-group-item d-flex justify-content-between align-items-center py-4">\n                <div class="mr-3 text-center flex-shrink-1">\n                    <span class="d-block badge badge-primary badge-pill" data-bind="text: $data.score"></span>\n                    <small class="d-block text-muted">score</small>\n                </div>\n                <article class="flex-grow-1">\n                    <span class="profile-note" data-bind="visible: $data.note, text: \'Note: \' + $data.note"></span>\n\n                    <div data-bind="text: $data.text"> </div>\n\n                    <cite class="d-block mt-3" data-bind="attr: { title: $data.authorDisplayName }">\n                        <span class="text-muted" data-bind="text: \' - \' + $data.authorDisplayName"></span>\n                    </cite>\n                </article>\n\n                <i class="fas fa-star fa-2x marked-star" data-bind="click: (comment, event) => $component.unmarkComment(comment, event)"></i>\n            </li>\n        </ul>\n    </div>\n</div>\n');var k=h(class extends p{constructor(t){super(t),this.username=Object(s.observable)(""),this.email=Object(s.observable)(""),this.password=Object(s.observable)("")}async register(){if(!this.inputFilledOut())return void alert("Please fill out all registration data");this.isLoading(!0);const t={displayName:this.username(),email:this.email(),password:this.password()};let e=await y.register(t);if(void 0!==e.email){const t={email:e.email,password:this.password()};await y.signIn(t),this.$store.dispatch("updateIsAuthenticated",!0),this.$router.setRoute("user-profile")}else alert("Registration Failed");this.isLoading(!1)}inputFilledOut(){return this.username().length>0&&this.email().length>0&&this.password().length>0}},'\n<div class="card" data-bind="visible: !isLoading()">\n    <div class="card-body">\n        <form data-bind="submit: register">\n            <div class="form-group">\n                <label for="username">User Name</label>\n                <input type="text" class="form-control" id="username" data-bind="value: username">\n            </div>  \n            <div class="form-group">\n                <label for="email">Email address</label>\n                <input type="email" class="form-control" id="email" data-bind="value: email">\n                <small class="form-text text-muted">We\'ll never share your email with anyone else.</small>\n            </div>\n            <div class="form-group">\n                <label for="password">Password</label>\n                <input type="password" class="form-control" id="password" data-bind="value: password">\n            </div>\n            <button type="submit" class="btn btn-primary">Register</button>\n        </form>\n    </div>\n</div>\n');var P=h(class extends p{constructor(t){super(t),this.question=Object(s.observable)({title:"",authorDisplayName:"",body:"",answers:[]}),this.fetchQuestion()}async fetchQuestion(){this.isLoading(!0);const t=await fetch(`http://localhost:5000/api/questions/${this.$params.id}`);this.question(await t.json()),this.isLoading(!1)}},'\n<section data="visible: !isLoading()">\n    <h2 class="mt-5 mb-3" data-bind="text: question().title"></h2>\n\n    <article class="card mb-5">\n        <section class="card-body" data-bind="html: question().body"></section>\n        <footer class="card-footer text-muted">\n            <cite data-bind="text: question().authorDisplayName"></cite>\n        </footer>\n    </article>\n\n    \x3c!-- ko foreach: question().answers --\x3e\n        <div class="card mb-5">\n            <div class="card-body" data-bind="html: $data.body"></div>\n\n            <footer class="card-footer text-muted">\n                <cite data-bind="text: $data.authorDisplayName"></cite>\n            </footer>\n\n            <ul class="list-group list-group-flush" data-bind="foreach: $data.comments">\n                <li class="list-group-item" data-bind="html: $data.text"></li>\n            </ul>\n        </div>\n    \x3c!-- /ko --\x3e\n</section>\n');var $={viewModel:class{constructor(){}},template:"\n<h1>Whoops...</h1>\n"};var S={name:"so-app",viewModel:class{constructor(){y.hasToken()&&c.commit("SET_IS_AUTHENTICATED",!0),this.isLoading=c.getters.isLoading}getComponent(){const t=d.currentRoute();return{name:t.component,params:t.params}}},template:'\n<so-navbar id="navbar"></so-navbar>\n\n<main id="content" class="container" data-bind="component: getComponent()"></main>\n\n\x3c!-- ko if: isLoading --\x3e\n    <so-loader id="loader" params="size: 200"></so-loader>\n\x3c!-- /ko --\x3e\n'};var O={viewModel:class{constructor(t){this.size=t.size||44}},template:'\n\x3c!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL --\x3e\n<svg\n    data-bind="attr: { width: size, height: size }"\n    width="44"\n    height="44"\n    viewBox="0 0 44 44"\n    xmlns="http://www.w3.org/2000/svg"\n    stroke="#343a40">\n    <g fill="none" fill-rule="evenodd" stroke-width="2">\n        <circle cx="22" cy="22" r="1">\n            <animate attributeName="r"\n                begin="0s" dur="1.8s"\n                values="1; 20"\n                calcMode="spline"\n                keyTimes="0; 1"\n                keySplines="0.165, 0.84, 0.44, 1"\n                repeatCount="indefinite" />\n            <animate attributeName="stroke-opacity"\n                begin="0s" dur="1.8s"\n                values="1; 0"\n                calcMode="spline"\n                keyTimes="0; 1"\n                keySplines="0.3, 0.61, 0.355, 1"\n                repeatCount="indefinite" />\n        </circle>\n        <circle cx="22" cy="22" r="1">\n            <animate attributeName="r"\n                begin="-0.9s" dur="1.8s"\n                values="1; 20"\n                calcMode="spline"\n                keyTimes="0; 1"\n                keySplines="0.165, 0.84, 0.44, 1"\n                repeatCount="indefinite" />\n            <animate attributeName="stroke-opacity"\n                begin="-0.9s" dur="1.8s"\n                values="1; 0"\n                calcMode="spline"\n                keyTimes="0; 1"\n                keySplines="0.3, 0.61, 0.355, 1"\n                repeatCount="indefinite" />\n        </circle>\n    </g>\n</svg>\n'};var j=h(class extends p{constructor(t){super(t),this.rawSearch=Object(s.observable)(""),this.collapsible=document.getElementById("navbarCollapse")}updateSearch(){const t=this.rawSearch();c.dispatch("updateSearchParams",t)}toggleCollapse(){this.collapsible.classList.toggle("show")}navigate(t,e,a={}){t.preventDefault(),d.setRoute(e,a)}signOut(){y.signOut(),c.commit("SET_IS_AUTHENTICATED",!1)}},'\n<nav class="navbar fixed-top navbar-expand-lg navbar-light bg-light">\n    <div class="container">\n        <a class="navbar-brand" href="#">App</a>\n        <button class="navbar-toggler" type="button" data-bind="click: toggleCollapse">\n            <span class="navbar-toggler-icon"></span>\n        </button>\n        <div id="navbarCollapse" class="collapse navbar-collapse">\n            <ul class="navbar-nav mr-auto">\n                <li class="nav-item">\n                    <a class="nav-link" href="/home" data-bind="click: (_, event) => navigate(event, \'home\')">Home</a>\n                </li>\n                <li class="nav-item">\n                    <a class="nav-link" href="/force-Graph" data-bind="click: (_, event) => navigate(event, \'force-graph\')">Force Graph</a>\n                </li>\n                <li class="nav-item">\n                    <a class="nav-link" href="/word-cloud" data-bind="click: (_, event) => navigate(event, \'word-cloud\')">Word Cloud</a>\n                </li>\n                <li class="nav-item">\n                    <a class="nav-link" href="/user-profile" data-bind="visible: $store.getters.isAuthenticated(), click: (_, event) => navigate(event, \'user-profile\')">User profile</a>\n                </li>\n            </ul>\n\n            <form class="form-inline my-2 mr-0 my-lg-0 mr-lg-2" data-bind="submit: updateSearch">\n                <input type="text" class="form-control" placeholder="Search..." data-bind="value: rawSearch">\n            </form>\n\n            <button class="btn btn-outline-success mr-2"\n                data-bind="visible: !$store.getters.isAuthenticated(), click: (_, event) => navigate(event, \'sign-in\')"\n                type="button">Sign in</button>\n\n            <button class="btn btn-outline-danger"\n                data-bind="visible: $store.getters.isAuthenticated(), click: signOut"\n                type="button">Sign Out</button>\n\n            <button class="btn btn-outline-primary"\n                data-bind="visible: !$store.getters.isAuthenticated(), click: (_, event) => navigate(event, \'register\')"\n                type="button">Register</button>\n        </div>\n    </div>\n</nav>\n'),C=a(86),A=a(87);var M=h(class extends p{constructor(t){super(t),this.chart=C.init(document.getElementById("chart")),this.initCircularGraph();const e=this.$store.subscribe("searchParams",t=>{this.isLoading(!0),this.fetchGraphInput(t[0])});let a;const s=()=>{void 0!==a&&clearTimeout(a),a=setTimeout(()=>{null!=this.chart&&void 0!==this.chart&&this.chart.resize()},300)};window.addEventListener("resize",s),this.dispose=function(){e.dispose(),window.removeEventListener("resize",s),this.chart.dispose()}}async fetchGraphInput(t){let e=await i.getForceGraphInput(t);this.drawForceGraph(e,t)}initGraph(){this.chart.setOption({title:{subtext:"",top:"top",left:"right"},tooltip:{},series:[{type:"graph",layout:"force",roam:!0,focusNodeAdjacency:!0,label:{show:!0,normal:{position:"right"}},force:{repulsion:100,gravity:.05,edgeLength:100},zoom:2}]})}initCircularGraph(){this.chart.setOption({title:{subtext:"",top:"top",left:"right"},tooltip:{},series:[{type:"graph",layout:"circular",roam:!0,focusNodeAdjacency:!0,label:{show:!0,normal:{position:"right"}},lineStyle:{color:"source",curveness:.3},emphasis:{lineStyle:{width:10}},zoom:.8}]})}drawForceGraph(t,e){this.isLoading(!0);const a=this.mapNodes(t.nodes),s=this.mapEdges(t.links),n=a.length,r=s.length;this.chart.setOption({title:{text:`Force Graph for '${e}'\n\nWords: ${n}\nAssociations: ${r}`},series:[{data:a,links:s}]}),this.isLoading(!1)}mapNodes(t){return t.map(t=>(t.itemStyle={color:A.randomColor()},t.symbolSize=20,t.value=t.symbolSize,t.category="Word",t.x=t.y=null,t.draggable=!0,t.name=t.id,t))}mapEdges(t){return t.map(t=>{let e=t.value%2>0?t.value/2+t.value%2:t.value,a=Math.sqrt(e);return t.lineStyle={width:a},t})}},'\n<div id="chart" style="width:100%;height:80vh;"></div>\n');class T extends p{constructor(t){super(t)}}var N={viewModel:{createViewModel:(...t)=>new T(t)},template:'\n<div class="container">\n    <div class="card card-rounded-bottom border-0">\n        <div class="card-body-list">hello</div>\n\n        <div class="list-group list-group-flush">\n            <a href="#" class="list-group-item list-group-item-action">Dapibus ac facilisis in</a>\n            <a href="#" class="list-group-item list-group-item-action">Morbi leo risus</a>\n            <a href="#" class="list-group-item list-group-item-action">Porta ac consectetur ac</a>\n        </div>\n    </div>\n</div>\n'};a(506);var I=h(class extends p{constructor(t){super(t),this.chart=C.init(document.getElementById("word-cloud")),this.initGraph();const e=this.$store.subscribe("searchParams",t=>{this.isLoading(!0),this.loadCloudInput(t[0])});let a;const s=()=>{void 0!==a&&clearTimeout(a),a=setTimeout(()=>{null!=this.chart&&void 0!==this.chart&&this.chart.resize()},300)};window.addEventListener("resize",s),this.dispose=function(){e.dispose(),window.removeEventListener("resize",s),this.chart.dispose()}}async loadCloudInput(t){let e=await i.getWords(t,100);this.drawWordCloud(e,t),this.isLoading(!1)}initGraph(){this.chart.setOption({title:{subtext:"",top:"top",left:"right"},tooltip:{},series:[{type:"wordCloud",shape:"circle",left:"center",top:"center",width:"100%",height:"100%",right:null,bottom:null,sizeRange:[30,90],rotationRange:[-90,90],rotationStep:45,gridSize:11,drawOutOfBound:!0,textStyle:{normal:{fontFamily:"sans-serif",fontWeight:"bold",color:A},emphasis:{shadowBlur:10,shadowColor:"#333"}},zoom:2,data:[{name:"Enter Search Term",value:500,textStyle:{normal:{},emphasis:{}}}]}]})}drawWordCloud(t,e){const a=this.mapWord(t);this.chart.setOption({title:{text:`Word cloud for '${e}'`},series:[{data:a}]})}mapWord(t){return t.map(t=>(t.name=t.word,t.value=t.weight,t.textStyle={normal:{},emphasis:{}},t))}},'\n<div id="word-cloud" style="width:100%;height:80vh;"></div>\n');var E={viewModel:class{constructor(t={}){this.searchParams=c.getters.searchParams,this.isAuthenticated=c.getters.isAuthenticated,this.items=t.items,this.showNote=Object(s.observable)(!1),this.note=Object(s.observable)(""),this.focusedPost,this.postMarker=document.getElementById("post-marker")}navigate(t,e,a={}){t.preventDefault(),d.setRoute(e,a)}displayNoteOrToggle(t,e){if(this.focusedPost=t,t.marked)this.toggleMarkPost();else{this.showNote(!0);const{x:t,y:a}=e.srcElement.getBoundingClientRect();this.postMarker.style.top=`${Math.abs(a-60)}px`,this.postMarker.style.left=`${Math.abs(t-260)}px`}}toggleMarkPost(){const t=this.items.peek().map(t=>{if(t.id===this.focusedPost.id){const e=!t.marked;return{...t,marked:e,note:e?this.note():""}}return t});this.showNote(!1),this.items(t),c.dispatch("toggleMarkPost",{id:this.focusedPost.id,note:this.note()})}},template:'\n<div id="post-marker" class="card card-list-note shadow" data-bind="visible: showNote">\n    <form data-bind="submit: () => $component.toggleMarkPost()" class="p-3">\n        <label class="mb-0">\n            <b class="d-block mb-2">Set optional note?</b>\n            <input type="text" class="form-control mb-2" placeholder="Enter optional note" data-bind="value: note">\n            <button type="submit" class="btn btn-primary btn-sm mr-2">OK</button>\n            <button type="button" class="btn btn-default btn-sm" data-bind="click: () => showNote(false)">Cancel</button>\n        </label>\n    </form>\n</div>\n\n\x3c!-- ko foreach: items --\x3e\n<article class="card mb-3">\n    <div class="card-body">\n        \x3c!-- ko if: $data.title --\x3e\n        <h5 class="card-title mb-2" data-bind="html: $data.title"></h5>\n        \x3c!-- /ko --\x3e\n        <div class="d-flex">\n            <aside class="flex-shrink-1 mr-3">\n                <div class="score text-center">\n                    <span class="d-block badge badge-primary" data-bind="text: $data.score"></span>\n                    <small class="d-block">score</small>\n                </div>\n            </aside>\n\n            <div class="flex-grow-1">\n                <div data-bind="html: $data.body + \'...\'"></div>\n                <div class="mt-2 text-info font-weight-bold" data-bind="visible: $data.note, text: \'Note: \' + $data.note"></div>\n            </div>\n\n            \x3c!-- ko if: $component.isAuthenticated() --\x3e\n            <i class="flex-shrink-1 align-self-center ml-3 text-warning fa-star fa-2x" data-bind="click: (data, event) => $component.displayNoteOrToggle(data, event), css: { fas: $data.marked, far: !$data.marked }"></i>\n            \x3c!-- /ko --\x3e\n        </div>\n    </div>\n    <footer class="card-footer bg-white d-flex align-items-center justify-content-between">\n        <div class="text-muted">\n            <span>by</span>\n            <cite data-bind="text: $data.authorDisplayName"></cite>\n            <span>on the <time data-bind="text: $data.creationDate"></time></span>\n        </div>\n        <button type="button" class="btn btn-outline-dark btn-sm" data-bind="click: (_, event) => $component.navigate(event, \'question\', { id: $data.questionId })">Read\n            more</button>\n    </footer>\n</article>\n\x3c!-- /ko --\x3e\n'};n.a.options.deferUpdates=!0,n.a.components.register("so-home",v),n.a.components.register("so-sign-in",w),n.a.components.register("so-user-profile",x),n.a.components.register("so-register",k),n.a.components.register("so-question",P),n.a.components.register("so-failure",$),n.a.components.register("so-app",S),n.a.components.register("so-loader",O),n.a.components.register("so-navbar",j),n.a.components.register("so-force-graph",M),n.a.components.register("so-search",N),n.a.components.register("so-word-cloud",I),n.a.components.register("so-list",E),n.a.applyBindings()}});